let system(G:Gen,skat:sskey,pkat:spkey,aaguid:AAGUID,rpid:RpID,uHandle:UserHandle,pWord:PassWord,wk:key)=
(

	new PinToken:bitstring;
	new PIN:bitstring;

	
	(* set CTAPType *)
	(*let ctap_type = getToken in*)
	(*let ctap_type = noCTAP in
	let au_type = client in*)

    (* some fields initial public *)
	out(cP,(G,aaguid,rpid,uHandle,pkat));

	(* leaked fields *)


	if ctap_type = noCTAP then
	(
		(* malicious entities in Registration *)

		
		Reg_Authnr(aaguid, skat, pkat, wk, CA, au_type, ctap_type)|
		Reg_Client(uHandle, pWord, CR, CA, ctap_type)|
		Reg_Server(rpid, uHandle, pWord, CR)
	)
	else
	(
		(* malicious entities in CTAP Process *)
		

		CTAP_Authnr(G, PIN, CA, ctap_type)|
		CTAP_Client(G, PIN, CA, ctap_type)|

		phase 1;
		(* malicious entities in Registration *)


		Reg_Authnr(aaguid, skat, pkat, wk, CA, au_type, ctap_type)|
		Reg_Client(uHandle, pWord, CR, CA, ctap_type)|
		Reg_Server(rpid, uHandle, pWord, CR)
	)
).

process
( 
	(* Setup *)
    new G:Gen;                (* Pre-generated parameters of KeyAgreement *)  
	new uHandle:UserHandle;   (* User Info *)
	new pWord:PassWord;
	new aaguid:AAGUID;        (* Authenticatior Info *)
	new rpid:RpID;	          (* Relying Party info *)
	new wk:key;               (* Wrapping Key in Registration Phase *)
	new skat:sskey;           (* Attestation Key Pair *)
	let pkat = spk(skat) in
	!system(G,skat,pkat,aaguid,rpid,uHandle,pWord,wk)
)
