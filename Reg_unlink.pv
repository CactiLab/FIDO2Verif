let system(G:Gen,skat:sskey,pkat:spkey,aaguid:AAGUID,rpid:RpID,uHandle:UserHandle,pWord:PassWord,wk:key)=
(
	new PinToken:bitstring;
	new PIN:bitstring;


	(* set CTAPType *)
	let ctap_type = getToken in
    let au_type = client in
	(* let au_type = server in *)

    (* some fields initial public *)
	out(cP,(G,aaguid,rpid,uHandle,pkat));

	(* leaked fields *)


	(* entities *)
    CTAP_Authnr(G, PIN, CA, ctap_type)|
    CTAP_Client(G, PIN, CA, ctap_type)|
    phase 1;
    Reg_Authnr(aaguid, skat, pkat, wk, CA, au_type, ctap_type)|
    Reg_Client(uHandle, pWord, CR, CA, ctap_type)|
    Reg_Server(rpid, uHandle, pWord, CR)

).

process
( 
	(* Setup *)
    new G:Gen;                (* Pre-generated parameters of KeyAgreement *)  
	new uHandle:UserHandle;   (* User Info *)
	new pWord:PassWord;
	new aaguid:AAGUID;        (* Authenticatior Info *)
	new rpid:RpID;	          (* Relying Party info *)
	new wk:key;               (* Wrapping Key in Registration Phase *)
	new skat:sskey;           (* Attestation Key Pair *)
	let pkat = spk(skat) in
    (* User 1 registers in RP 1 *)
	!system(G,skat,pkat,aaguid,rpid,uHandle,pWord,wk)|
    (* User 1 authenticate in RP 2 *)
    !(
        new uHandle1:UserHandle;   (* User Info *)
	    new pWord1:PassWord;
	    new aaguid1:AAGUID;        (* Authenticatior Info *)
	    new rpid1:RpID;	           (* Relying Party info *)
	    new wk1:key;               (* Wrapping Key in Registration Phase *)
        !system(G,skat,pkat,aaguid,rpid1,uHandle1,pWord1,choice[wk,wk1])
    )
)
